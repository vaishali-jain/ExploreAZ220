Steps to create a device with Self signed certificate

just like symmtric keys, we need both a primary way and secondary way to authenticate. so we need to create 2 self signed certificates for our device
1. .\GenerateTestCertficate.ps1 -deviceName "selfsigneddemodevice1" -certificateValidaityInYears 1
provide the pfx password
This creates 2 files
1. Certificate itself(certificate.cer)
2. pfx file(certificate.pfx)
pfx is PERSONAL EXCHANGE FORMAT. it is a special file that contains both public and private keys of our certificate. thats why it is password protected. do not share
this file outside your org
copy the pfx file into solution
2.  Generate secondary certificate using same command
.\GenerateTestCertficate.ps1 -deviceName "selfsigneddemodevice1" -certificateValidaityInYears 1
copy the pfx file into solution
open the certificate and copy the thumbprint
3. In the Azure portal, create new device in iothub, Authentication type: X.509 Self-Signed, paste the thumbprint of primary and secondary certificates
We just need pfx files and not certificates in the vs solution
Thumbprint in iothub device should match the thumbprint contained within the pfx files
> Configure authentication
In the solution, we need Microsoft.Azure.Devices.Client nuget package
using System;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Devices.Client;
using Microsoft.Azure.Devices.Client.Exceptions;

namespace X509Certs
{
    class Program
    {
        private static DeviceClient _deviceClient;


        static async Task Main(string[] args)
        {
            var primaryPFX = new X509Certificate2(@"Certificates/primary.pfx", "1234");
            var primaryAuth = new DeviceAuthenticationWithX509Certificate("SelfSignedDevice1", primaryPFX);

            var secondaryPFX = new X509Certificate2(@"Certificates/secondary.pfx", "1234");
            var secondaryAuth = new DeviceAuthenticationWithX509Certificate("SelfSignedDevice1", secondaryPFX);

            _deviceClient = DeviceClient.Create("pstest.azure-devices.net", primaryAuth, TransportType.Amqp_Tcp_Only);

      

            using var cts = new CancellationTokenSource();
            Console.CancelKeyPress += (sender, eventArgs) =>
            {
                eventArgs.Cancel = true;
                cts.Cancel();
                Console.WriteLine("Exiting...");
            };

            // Run the telemetry loop
            try
            {
                await SendMessagesAsync(cts.Token);

            }
            catch (UnauthorizedException  ex)
            {
                // if primary authentication fails then try again with the secondary authentication thumbprint 
                _deviceClient = DeviceClient.Create("pstest.azure-devices.net", secondaryAuth, TransportType.Amqp_Tcp_Only);
                await SendMessagesAsync(cts.Token);
            }
      

            _deviceClient.Dispose();
            Console.WriteLine("Device simulator finished.");

        }

        private static async Task SendMessagesAsync(CancellationToken cancellationToken)
        {
            int speed = 0;
            var rand = new Random();

            while (!cancellationToken.IsCancellationRequested)
            {
                int currentSpeed = speed + rand.Next(1, 60);

                string messageBody = JsonSerializer.Serialize(
                    new
                    {
                        vehicleRegistration = "RJ69 XRT",
                        vehiclespeed = currentSpeed

                    });
                using var message = new Message(Encoding.ASCII.GetBytes(messageBody))
                {
                    ContentType = "application/json",
                    ContentEncoding = "utf-8",
                };

                await _deviceClient.SendEventAsync(message);
                Console.WriteLine($"{DateTime.Now} > Sending message: {messageBody}");

                await Task.Delay(1000);
            }
        }
    }
}


